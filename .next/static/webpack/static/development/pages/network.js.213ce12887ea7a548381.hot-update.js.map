{"version":3,"file":"static/webpack/static\\development\\pages\\network.js.213ce12887ea7a548381.hot-update.js","sources":["webpack:///./components/MessageCard.js","webpack:///./components/MessageForm.js","webpack:///./pages/network.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List, Tooltip } from 'antd';\r\nimport Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\nconst MessageCard = ({ post }) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [commentText, setCommentText] = useState('');\r\n    const { me } = useSelector(state => state.user);\r\n    const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n    const dispatch = useDispatch();\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened(prev => !prev);\r\n    }, []);\r\n\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        if (!me) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type: ADD_COMMENT_REQUEST,\r\n            data: {\r\n                postId: post.id,\r\n            },\r\n        });\r\n    }, [me && me.id]);\r\n\r\n    useEffect(() => {\r\n        setCommentText('');\r\n    }, [commentAdded === true]);\r\n\r\n    const onChangeCommentText = useCallback((e) => {\r\n        setCommentText(e.target.value);\r\n    }, []);\r\n\r\n    return (\r\n        <div style={{width:'60vw'}}>\r\n            {/* <Card\r\n                key={+post.createdAt}\r\n                cover={post.img && <img alt=\"example\" src={post.img} />}\r\n                actions={[\r\n                    <Icon type=\"retweet\" key=\"retweet\" />,\r\n                    <Icon type=\"heart\" key=\"heart\" />,\r\n                    <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n                    <Icon type=\"ellipsis\" key=\"ellipsis\" />,\r\n                ]}\r\n                extra={<Button>팔로우</Button>}\r\n            >\r\n                <Card.Meta\r\n                    avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                    title={post.User.nickname}\r\n                    description={(\r\n                        <div>{post.content.split(/(#[^\\s]+)/g).map((v) => {\r\n                            if (v.match(/#[^\\s]+/)) {\r\n                                return (\r\n                                    <Link href='/hashtag' key={v}><a>{v}</a></Link>\r\n                                );\r\n                            }\r\n                            return v;\r\n                        })}</div>\r\n                    )} // a tag x -> Link tag\r\n                />\r\n            </Card> */}\r\n           \r\n                <Comment\r\n                    style={{background:'#FFFFFF'}}\r\n                    actions={<span key=\"comment-list-reply-to-0\" onClick={onToggleComment} >Reply to</span>}\r\n                    author={post.User.nickname}\r\n                    avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                    content={(\r\n                        <div>{post.content.split(/(#[^\\s]+)/g).map((v) => {\r\n                            if (v.match(/#[^\\s]+/)) {\r\n                                return (\r\n                                    <Link href='/hashtag' key={v}><a>{v}</a></Link>\r\n                                );\r\n                            }\r\n                            return v;\r\n                        })}</div>\r\n                    )}\r\n                    datetime={(\r\n                        <Tooltip\r\n                          title={post.createdAt}\r\n                        >\r\n                          <span>\r\n                            {post.createdAt}\r\n                          </span>\r\n                        </Tooltip>\r\n                      )}\r\n\r\n                    // {+post.createdAt}\r\n                />\r\n            \r\n\r\n            {/* {commentFormOpened && (\r\n                <>\r\n                    <Form onSubmit={onSubmitComment}>\r\n                        <Form.Item>\r\n                            <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n                        </Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>전송</Button>\r\n                    </Form>\r\n                    <List\r\n                        header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments || []}\r\n                        renderItem={item => (\r\n                            <li>\r\n                                <Comment\r\n                                    author={item.User.nickname}\r\n                                    avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                    content={item.content}\r\n                                />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </>\r\n            )} */}\r\n        </div>\r\n    );\r\n};\r\n\r\nMessageCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        img: PropTypes.string,\r\n        createdAt: PropTypes.object,\r\n    }),\r\n};\r\n\r\nexport default MessageCard;","import React, { useCallback, useState, useEffect } from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_POST_REQUEST } from '../reducers/post';\r\nimport { FileImageOutlined } from '@ant-design/icons';\r\n\r\nconst MessageForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = useState('');\r\n  const { imagePaths, isAddingPost, postAdded } = useSelector(state => state.post);\r\n\r\n  useEffect(() => {\r\n    if (postAdded) {\r\n      setText('');\r\n    }\r\n  }, [postAdded]);\r\n\r\n  const onSubmitForm = useCallback((e) => {\r\n    e.preventDefault();\r\n    if (!text || !text.trim()) {\r\n      return alert('게시글을 작성하세요.');\r\n    }\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data: {\r\n        content: text.trim(),\r\n      },\r\n    });\r\n  }, [text]);\r\n\r\n  const onChangeText = useCallback((e) => {\r\n    setText(e.target.value);\r\n  }, []);\r\n\r\n  return (\r\n    // '10px 0 20px' \r\n    <Form encType=\"multipart/form-data\" onSubmit={onSubmitForm} style={{width:'70vw'}}>\r\n      <div style={{background:'#FFFFFF', height:'12vh'}}>\r\n        <Input.TextArea maxLength={140} placeholder=\"어떤 신기한 일이 있었나요?\" value={text} onChange={onChangeText} style={{borderColor:'#FFFFFF'}} />\r\n        <input type=\"file\" multiple hidden />\r\n        <Button style={{borderColor:'#FFFFFF',float:'left'}}> <FileImageOutlined /> 이미지</Button>\r\n        <Button type=\"primary\" style={{ float: 'right', background: '#19442C', borderColor: '#19442C' }} htmlType=\"submit\" loading={isAddingPost}>전송</Button>\r\n      </div>\r\n      <div>\r\n        {imagePaths.map((v) => (\r\n          <div key={v} style={{ display: 'inline-block' }}>\r\n            <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\r\n            <div>\r\n              <Button>제거</Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default MessageForm;\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport MessageForm from '../components/MessageForm';\r\nimport MessageCard from '../components/MessageCard';\r\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\r\nimport { List, message, Avatar, Spin } from 'antd';\r\nimport \"../styles/messageScrollStyle.css\";\r\nimport {CloseOutlined} from '@ant-design/icons';\r\n\r\nconst Network = () => {\r\n    const { me } = useSelector(state => state.user);\r\n    const { mainPosts } = useSelector(state => state.post);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch({\r\n            type: LOAD_MAIN_POSTS_REQUEST,\r\n        });\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div className=\"messageScrollDiv\" style={{ marginLeft: 40, marginTop: 20, boxShadow:'4px 4px 4px gray', width:'71vw', borderTop:'1px solid', borderLeft:'1px solid'}}>\r\n            <div style={{ background: 'rgba(135, 185, 74, 0.1)', width: '71vw', height: '6vh', paddingTop: '1vh' , paddingLeft:'10px'}}>\r\n                <div style={{ background: '#222222', float: 'left', borderRadius: '17.5px', fontFamily: 'Noto Sans KR', fontStyle: 'normal', fontWeight: 'normal', fontSize: '14px', height: '4vh', color: '#FFFFFF', border: '0.1px solid #FFFFFF', width: '70px', textAlign: 'center', paddingTop: '0.5vh' }}>\r\n                    김민지</div>\r\n                <div style={{ background: '#222222', float: 'left', borderRadius: '17.5px', fontFamily: 'Noto Sans KR', fontStyle: 'normal', fontWeight: 'normal', fontSize: '14px', height: '4vh', color: '#FFFFFF', border: '0.1px solid #FFFFFF', width: '70px', textAlign: 'center', paddingTop: '0.5vh' }}>\r\n                    구민정</div>\r\n                <div style={{float:'right', paddingRight:'10px'}}> <CloseOutlined /></div>\r\n            </div>\r\n            <MessageForm />\r\n            <div style={{ padding:'15px', background:'#FFFFFF'}}>\r\n                {mainPosts.map((c) => {\r\n                    return (\r\n                        <MessageCard key={c} post={c} />\r\n                    );\r\n                })}\r\n            </div>\r\n        </div> \r\n\r\n    );\r\n};\r\n\r\nexport default Network;"],"mappings":"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","sourceRoot":""}