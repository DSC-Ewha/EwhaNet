{"version":3,"file":"static/webpack/static\\development\\pages\\schools.js.e55197431b5d478083de.hot-update.js","sources":["webpack:///./components/PostCard.js","webpack:///./components/PostForm.js","webpack:///./pages/schools.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List, Row, Col } from 'antd';\r\nimport Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\nconst PostCard = ({ post }) => {\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState('');\r\n  const { me } = useSelector(state => state.user);\r\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened(prev => !prev);\r\n  }, []);\r\n\r\n  const onSubmitComment = useCallback((e) => {\r\n    e.preventDefault();\r\n    if (!me) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: ADD_COMMENT_REQUEST,\r\n      data: {\r\n        postId: post.id,\r\n      },\r\n    });\r\n  }, [me && me.id]);\r\n\r\n  useEffect(() => {\r\n    setCommentText('');\r\n  }, [commentAdded === true]);\r\n\r\n  const onChangeCommentText = useCallback((e) => {\r\n    setCommentText(e.target.value);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Card\r\n        key={+post.createdAt}\r\n        cover={post.img && <img alt=\"example\" src={post.img} />}\r\n        actions={[\r\n          // <Icon type=\"retweet\" key=\"retweet\" />,\r\n          // <Icon type=\"heart\" key=\"heart\" />,\r\n          // <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n          // <Icon type=\"ellipsis\" key=\"ellipsis\" />,\r\n        ]}\r\n      >\r\n        <Card.Meta\r\n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n          title={post.User.nickname}\r\n          description={(\r\n            <>\r\n              <Row>\r\n                <Col span={22}>\r\n                  <div>{post.content.split(/(#[^\\s]+)/g).map((v) => {\r\n                    if (v.match(/#[^\\s]+/)) {\r\n                      return (\r\n                        <Link href='/hashtag' key={v}><a>{v}</a></Link>\r\n                      );\r\n                    }\r\n                    return v;\r\n                  })}</div>\r\n                </Col>\r\n                <Col span={2}>\r\n                  <Button shape=\"circle\" style={{fontSize:'14px'}}>댓글</Button> \r\n                  <Button shape=\"circle\" style={{fontSize:'14px'}}>하트</Button>\r\n                  <Button shape=\"circle\" style={{fontSize:'14px'}}>공유</Button>\r\n                </Col>\r\n              </Row>\r\n            </>\r\n          )} // a tag x -> Link tag\r\n        />\r\n      </Card>\r\n      {commentFormOpened && (\r\n        <>\r\n          <Form onSubmit={onSubmitComment}>\r\n            <Form.Item>\r\n              <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\r\n          </Form>\r\n          <List\r\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || []}\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    img: PropTypes.string,\r\n    createdAt: PropTypes.object,\r\n  }),\r\n};\r\n\r\nexport default PostCard;\r\n","import React, { useCallback, useState, useEffect } from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_POST_REQUEST } from '../reducers/post';\r\n\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = useState('');\r\n  const { imagePaths, isAddingPost, postAdded } = useSelector(state => state.post);\r\n\r\n  useEffect(() => {\r\n    if (postAdded) {\r\n      setText('');\r\n    }\r\n  }, [postAdded]);\r\n\r\n  const onSubmitForm = useCallback((e) => {\r\n    e.preventDefault();\r\n    if (!text || !text.trim()) {\r\n      return alert('게시글을 작성하세요.');\r\n    }\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data: {\r\n        content: text.trim(),\r\n      },\r\n    });\r\n  }, [text]);\r\n\r\n  const onChangeText = useCallback((e) => {\r\n    setText(e.target.value);\r\n  }, []);\r\n\r\n  return (\r\n    <Form style={{ margin: '10px 0 20px',padding:'20px', background:'#FFFFFF'}} encType=\"multipart/form-data\" onSubmit={onSubmitForm}>\r\n      <Input.TextArea maxLength={140} placeholder=\"어떤 신기한 일이 있었나요?\" value={text} onChange={onChangeText} />\r\n      <div style={{background:'#FFFFFF'}}>\r\n        <input type=\"file\" multiple hidden />\r\n        <Button style={{background:'#222222', color:'#FFFFFF'}}>이미지 업로드</Button>\r\n        <Button type=\"primary\" style={{ float: 'right', background:'#19442C', color:'#FFFFFF' }} htmlType=\"submit\" loading={isAddingPost}>올리기</Button>\r\n      </div>\r\n      <div>\r\n        {imagePaths.map((v) => (\r\n          <div key={v} style={{ display: 'inline-block' }}>\r\n            <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\r\n            <div>\r\n              <Button>제거</Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n","import React, { useState, useCallback } from 'react';\r\nimport { Input, Menu, Select, Button, List, Card, Layout, Avatar } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport Link from 'next/link';\r\nimport UserProfile from '../components/UserProfile';\r\n\r\nimport { useEffect } from 'react';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\r\n\r\n\r\nconst Schools = () => {\r\n    const { me } = useSelector(state => state.user);\r\n    const { Search } = Input;\r\n    const { Option } = Select;\r\n    const colleageData = ['인문대학', '자연대학', '공과대학'];\r\n    const majorData = {\r\n        '인문대학': ['철학과', '영문학과'],\r\n        '자연대학': ['수학과', '화학과'],\r\n        '공과대학': ['전자공학과', '기계공학과']\r\n    };\r\n    const schools = [\r\n        { title: '이화여자대학교', alumni: 150 },\r\n        { title: '이화여자대학교', alumni: 150 },\r\n        { title: '이화여자대학교', alumni: 150 },\r\n        { title: '이화여자대학교', alumni: 150 },\r\n        { title: '이화여자대학교', alumni: 150 },\r\n        { title: '이화여자대학교', alumni: 150 },\r\n        { title: '이화여자대학교', alumni: 150 },\r\n        { title: '이화여자대학교', alumni: 150 },\r\n        { title: '이화여자대학교', alumni: 150 },\r\n        { title: '이화여자대학교', alumni: 150 },\r\n    ]\r\n\r\n    const [colleage, setColleageState] = useState(majorData[colleageData[0]]);\r\n    const [major, setMajorState] = useState(majorData[colleageData[0]][0]);\r\n    const handleColleageChange = e => {\r\n        setColleageState(majorData[e]);\r\n        setMajorState(majorData[e][0]);\r\n    };\r\n    const onMajorChange = e => {\r\n        setMajorState(e);\r\n    }\r\n\r\n    const { mainPosts } = useSelector(state => state.post);\r\n    const dispatch = useDispatch();\r\n  \r\n    useEffect(() => {\r\n      dispatch({\r\n        type: LOAD_MAIN_POSTS_REQUEST,\r\n      });\r\n    }, []);\r\n\r\n    return (\r\n\r\n        <>\r\n            <UserProfile />\r\n            <Layout>\r\n                <div style={{ padding: '10px', background: '#222222', height: '10vh' }}>\r\n                    <div style={{\r\n                        padding: '2vh',\r\n                        fontFamily: 'Open Sans', fontStyle: 'normal', fontWeight: 'bold',\r\n                        fontSize: '20px', lineHeight: '34px', color: '#FFFFFF', mixBlendMode: 'normal'\r\n                    }}>\r\n                        이화연님의 포트폴리오\r\n                    <Button style={{ background: '#222222', color: '#FFFFFF', marginLeft: '1vw' }}>친구 추가하기</Button>\r\n                    </div>\r\n\r\n                </div>\r\n                <div style={{ textAlign: 'center' }}>\r\n                    <Menu mode='horizontal'\r\n                        style={{\r\n                            background: 'rgba(135, 185, 74, 0.1)', color: '#00462A', fontFamily: 'Noto Sans KR', fontStyle: 'normal',\r\n                            fontWeight: 'bold', textAlign: 'center'\r\n                        }}>\r\n                        <Menu.Item className=\"pageMenuStyle\" key=\"1\" style={{ color: '#00462A' }}>\r\n                            <Link href='/profile'>\r\n                                <a>\r\n                                    스펙/면접/시험\r\n                            </a>\r\n                            </Link>\r\n                        </Menu.Item>\r\n                        <Menu.Item className=\"pageMenuStyle\" key=\"2\" style={{ color: '#00462A' }}>\r\n                            <Link href=\"/introduce\">\r\n                                <a>\r\n                                    랩실 분위기\r\n                            </a>\r\n                            </Link>\r\n                        </Menu.Item>\r\n\r\n                    </Menu>\r\n                </div>\r\n                <div className=\"site-layout-background\" style={{ marginLeft: 40, marginTop: 20, marginRight: 20, minHeight: 360 }}>\r\n                    {mainPosts.map((c) => {\r\n                        return (\r\n                            <PostCard key={c} post={c} />\r\n                        );\r\n                    })}\r\n\r\n                </div>\r\n                {/* </div> */}\r\n            </Layout>\r\n        </>\r\n\r\n\r\n\r\n    );\r\n};\r\n\r\nexport default Schools;"],"mappings":"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","sourceRoot":""}